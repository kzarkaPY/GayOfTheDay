import os
import random
import asyncio
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from sqlalchemy.orm import Session
from sqlalchemy import func
import pytz
import logging
from sqlalchemy.exc import OperationalError

from models import (
    init_db, get_db, User, Season, SeasonStats, 
    CommandUsage, SeasonControl, SessionLocal
)

load_dotenv()

MOSCOW_TZ = pytz.timezone('Europe/Moscow')
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER = os.getenv('ADMIN_USER')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def wait_for_db(max_attempts=5, initial_delay=1):
    """–ñ–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    attempt = 0
    delay = initial_delay

    while attempt < max_attempts:
        try:
            init_db()
            logger.info("Successfully connected to database")
            return True
        except OperationalError as e:
            attempt += 1
            if attempt == max_attempts:
                logger.error(f"Failed to connect to database after {max_attempts} attempts")
                raise e
            
            logger.warning(f"Database connection attempt {attempt} failed. Retrying in {delay} seconds...")
            time.sleep(delay)
            delay *= 2

    return False

async def check_command_cooldown(chat_id: int, command: str, cooldown_hours: int, user_id: int = None) -> bool:
    db = SessionLocal()
    try:
        # –î–ª—è /sosal –∏ /nesosal –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if command in ['/sosal', '/nesosal']:
            last_usage = db.query(CommandUsage).filter(
                CommandUsage.chat_id == chat_id,
                CommandUsage.command == command,
                CommandUsage.user_id == user_id
            ).first()
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞
            last_usage = db.query(CommandUsage).filter(
                CommandUsage.chat_id == chat_id,
                CommandUsage.command == command
            ).first()

        if not last_usage:
            return True

        moscow_now = datetime.now(MOSCOW_TZ)
        if command in ['/run', '/pidor']:
            # Reset at midnight Moscow time
            last_midnight = moscow_now.replace(hour=0, minute=0, second=0, microsecond=0)
            if last_usage.last_used.astimezone(MOSCOW_TZ) < last_midnight:
                return True
        else:
            # Other commands use hour-based cooldown
            if last_usage.last_used.astimezone(MOSCOW_TZ) < moscow_now - timedelta(hours=cooldown_hours):
                return True

        return False
    finally:
        db.close()

async def update_command_usage(chat_id: int, command: str, user_id: int = None):
    db = SessionLocal()
    try:
        # –î–ª—è /sosal –∏ /nesosal –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if command in ['/sosal', '/nesosal']:
            usage = db.query(CommandUsage).filter(
                CommandUsage.chat_id == chat_id,
                CommandUsage.command == command,
                CommandUsage.user_id == user_id
            ).first()
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞
            usage = db.query(CommandUsage).filter(
                CommandUsage.chat_id == chat_id,
                CommandUsage.command == command
            ).first()

        moscow_now = datetime.now(MOSCOW_TZ)
        if usage:
            usage.last_used = moscow_now
        else:
            usage = CommandUsage(
                chat_id=chat_id,
                command=command,
                last_used=moscow_now,
                user_id=user_id if command in ['/sosal', '/nesosal'] else None
            )
            db.add(usage)
        
        db.commit()
    finally:
        db.close()

async def get_random_user(update: Update) -> tuple:
    chat_members = await update.effective_chat.get_member_count()
    if chat_members <= 1:
        return None, None

    while True:
        random_offset = random.randint(0, chat_members - 1)
        try:
            member = await update.effective_chat.get_member(
                user_id=(await update.effective_chat.get_administrators())[random_offset].user.id
            )
            user = member.user
            if not user.is_bot:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ first_name
                display_name = user.username if user.username else user.first_name
                return user.id, display_name
        except IndexError:
            continue

async def ensure_season_exists(db: Session) -> SeasonControl:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω, –µ—Å–ª–∏ —Å–µ–∑–æ–Ω–æ–≤ –Ω–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SeasonControl.
    """
    season_control = db.query(SeasonControl).first()
    if not season_control:
        moscow_now = datetime.now(MOSCOW_TZ)
        season_control = SeasonControl(current_season=1, is_active=True, last_clear=moscow_now)
        db.add(season_control)
        
        season = Season(
            season_number=1,
            start_date=moscow_now
        )
        db.add(season)
        db.commit()
    return season_control

async def run_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_command_cooldown(update.effective_chat.id, '/run', 24):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö—Ä–∞—Å–∞–≤—á–∏–∫ —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞"
        )
        return

    messages = ["–ö–†–£–¢–ò–ú –ë–ê–†–ê–ë–ê–ùü•Å", "–ì–∞–¥–∞–µ–º –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Öüìä", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–øüåö", "–õ—É–Ω–Ω–∞—è –ø—Ä–∏–∑–º–∞ –¥–∞–π –º–Ω–µ —Å–∏–ª—Éüí´", "–°–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–µüéØ"]
    
    for msg in messages:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=msg
        )
        await asyncio.sleep(1.5)

    user_id, display_name = await get_random_user(update)
    if not user_id:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ"
        )
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ–∑–æ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        season_control = await ensure_season_exists(db)
        
        user = db.query(User).filter(User.user_id == user_id).first()
        if not user:
            user = User(user_id=user_id, username=display_name, run_count=1)
            db.add(user)
        else:
            user.run_count += 1
            user.username = display_name

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–∑–æ–Ω–∞
        season_stat = db.query(SeasonStats).filter(
            SeasonStats.season_id == season_control.current_season,
            SeasonStats.user_id == user_id
        ).first()

        if not season_stat:
            season_stat = SeasonStats(
                season_id=season_control.current_season,
                user_id=user_id,
                username=display_name,
                run_count=1,
                pidor_count=0,
                sosal_count=0
            )
            db.add(season_stat)
        else:
            season_stat.run_count += 1
            season_stat.username = display_name
        
        db.commit()
        await update_command_usage(update.effective_chat.id, '/run')
        # –î–æ–±–∞–≤–ª—è–µ–º @ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ username
        name_with_prefix = f"@{display_name}" if user.username == display_name else display_name
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéâ–ö—Ä–∞—Å–∞–≤—á–∏–∫ —Å–µ–≥–æ–¥–Ω—è - {name_with_prefix}ü•≥"
        )
    finally:
        db.close()

async def pidor_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_command_cooldown(update.effective_chat.id, '/pidor', 24):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="^^^–ü–∏–¥–æ—Ä —Å–≤–µ—Ä—Ö—É^^^"
        )
        return

    messages = ["‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è", "–§–ï–î–ï–†–ê–õ–¨–ù–´–ôüîç–†–û–ó–´–°–öüö®–ü–ò–î–û–†–ê", "–°–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–ΩüöÄ", "–°–≤–æ–¥–∫–∏üëÆ–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞üöî–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", "–¢–≤–æ–πü´µ–ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Öüë•–ø—Ä–æ–ê–ù–ê–õ–∏–∑–∏—Ä–æ–≤–∞–Ωüò®"]
    
    for msg in messages:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=msg
        )
        await asyncio.sleep(1.5)

    user_id, display_name = await get_random_user(update)
    if not user_id:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ"
        )
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ–∑–æ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        season_control = await ensure_season_exists(db)
        
        user = db.query(User).filter(User.user_id == user_id).first()
        if not user:
            user = User(user_id=user_id, username=display_name, pidor_count=1)
            db.add(user)
        else:
            user.pidor_count += 1
            user.username = display_name

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–∑–æ–Ω–∞
        season_stat = db.query(SeasonStats).filter(
            SeasonStats.season_id == season_control.current_season,
            SeasonStats.user_id == user_id
        ).first()

        if not season_stat:
            season_stat = SeasonStats(
                season_id=season_control.current_season,
                user_id=user_id,
                username=display_name,
                run_count=0,
                pidor_count=1,
                sosal_count=0
            )
            db.add(season_stat)
        else:
            season_stat.pidor_count += 1
            season_stat.username = display_name
        
        db.commit()
        await update_command_usage(update.effective_chat.id, '/pidor')
        # –î–æ–±–∞–≤–ª—è–µ–º @ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ username
        name_with_prefix = f"@{display_name}" if user.username == display_name else display_name
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üè≥Ô∏è‚Äçüåà–°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† –î–ù–Ø - {name_with_prefix}üë¨"
        )
    finally:
        db.close()

async def sosal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await check_command_cooldown(update.effective_chat.id, '/sosal', 1, user_id):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–¢—ã —É–∂–µ —Å–æ—Å–∞–ª, –ø–æ–¥–æ–∂–¥–∏ —á–∞—Å–∏–∫"
        )
        return

    username = update.effective_user.username or update.effective_user.first_name

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ–∑–æ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        season_control = await ensure_season_exists(db)
        
        user = db.query(User).filter(User.user_id == user_id).first()
        if not user:
            user = User(user_id=user_id, username=username, sosal_count=1)
            db.add(user)
        else:
            user.sosal_count += 1
            user.username = username

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–∑–æ–Ω–∞
        season_stat = db.query(SeasonStats).filter(
            SeasonStats.season_id == season_control.current_season,
            SeasonStats.user_id == user_id
        ).first()

        if not season_stat:
            season_stat = SeasonStats(
                season_id=season_control.current_season,
                user_id=user_id,
                username=username,
                run_count=0,
                pidor_count=0,
                sosal_count=1
            )
            db.add(season_stat)
        else:
            season_stat.sosal_count += 1
            season_stat.username = username

        db.commit()
        await update_command_usage(update.effective_chat.id, '/sosal', user_id)
        name_with_prefix = f"@{username}" if user.username == username else username
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{name_with_prefix} —Å–æ—Å–∞–ª {user.sosal_count} —Ä–∞–∑(–∞)"
        )
    finally:
        db.close()

async def nesosal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await check_command_cooldown(update.effective_chat.id, '/nesosal', 1, user_id):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–¢—ã —É–∂–µ –ø–∏–∑–¥–µ–ª, –ø–æ–¥–æ–∂–¥–∏ —á–∞—Å–∏–∫"
        )
        return

    username = update.effective_user.username or update.effective_user.first_name

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.user_id == user_id).first()
        if not user:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –ø–æ—Å–æ—Å–∞—Ç—å))"
            )
            return

        user.sosal_count *= 2
        user.username = username
        db.commit()
        
        await update_command_usage(update.effective_chat.id, '/nesosal', user_id)
        name_with_prefix = f"@{username}" if user.username == username else username
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{name_with_prefix} –ø–∏–∑–¥–∞–±–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–æ—Å–∞–ª {user.sosal_count} —Ä–∞–∑(–∞)"
        )
    finally:
        db.close()

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    try:
        run_stats = db.query(User).filter(User.run_count > 0).order_by(User.run_count.desc()).all()
        pidor_stats = db.query(User).filter(User.pidor_count > 0).order_by(User.pidor_count.desc()).all()

        if not run_stats and not pidor_stats:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞"
            )
            return

        if run_stats:
            run_message = "üèÜ–¢–æ–ø –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤ –¥–Ω—èüèÜ:\n"
            for i, user in enumerate(run_stats, 1):
                name_with_prefix = f"@{user.username}" if '@' not in user.username else user.username
                run_message += f"{i}. {name_with_prefix}: {user.run_count}\n"
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=run_message
            )

        if pidor_stats:
            pidor_message = "üçÜ–ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –µ–±–∞–ª—Å—è –≤ –∂–æ–ø—ÉüçÜ:\n"
            for i, user in enumerate(pidor_stats, 1):
                name_with_prefix = f"@{user.username}" if '@' not in user.username else user.username
                pidor_message += f"{i}. {name_with_prefix}: {user.pidor_count} —Ä–∞–∑(–∞)\n"
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=pidor_message
            )
    finally:
        db.close()

async def sostats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    try:
        sosal_stats = db.query(User).filter(User.sosal_count > 0).order_by(User.sosal_count.desc()).all()

        if not sosal_stats:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞"
            )
            return

        message = "–°–æ—Å—É—â–∏–π –¢–û–ü:\n"
        for i, user in enumerate(sosal_stats, 1):
            name_with_prefix = f"@{user.username}" if '@' not in user.username else user.username
            message += f"{i}. {name_with_prefix}: {user.sosal_count} —Ä–∞–∑(–∞)\n"
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message
        )
    finally:
        db.close()

async def clear_season(update: Update, context: ContextTypes.DEFAULT_TYPE, force: bool = False):
    db = SessionLocal()
    try:
        season_control = db.query(SeasonControl).first()
        if not season_control:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°–µ–∑–æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è"
            )
            return

        moscow_now = datetime.now(MOSCOW_TZ)
        if not force:
            if not season_control.last_clear:
                season_control.last_clear = moscow_now - timedelta(days=91)
            
            days_since_last_clear = (moscow_now - season_control.last_clear.astimezone(MOSCOW_TZ)).days
            if days_since_last_clear < 90:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {90 - days_since_last_clear} –¥–Ω–µ–π"
                )
                return

        # Save current season stats
        current_season = season_control.current_season
        users = db.query(User).all()
        
        for user in users:
            if user.run_count > 0 or user.pidor_count > 0 or user.sosal_count > 0:
                season_stat = SeasonStats(
                    season_id=current_season,
                    user_id=user.user_id,
                    username=user.username,
                    run_count=user.run_count,
                    pidor_count=user.pidor_count,
                    sosal_count=user.sosal_count
                )
                db.add(season_stat)

        # Update season control
        season_control.current_season += 1
        season_control.last_clear = moscow_now
        season_control.is_active = False

        # Reset current stats
        for user in users:
            user.run_count = 0
            user.pidor_count = 0
            user.sosal_count = 0

        db.commit()
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°–µ–∑–æ–Ω {current_season} –∑–∞–≤–µ—Ä—à–µ–Ω"
        )
    finally:
        db.close()

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await clear_season(update, context, force=False)

async def admclear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != ADMIN_USER:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        return
    
    await clear_season(update, context, force=True)

async def create_season_keyboard(seasons_count: int):
    keyboard = []
    row = []
    for i in range(max(1, seasons_count - 7), seasons_count + 1):
        row.append(InlineKeyboardButton(f"–°–µ–∑–æ–Ω {i}", callback_data=f"season_{i}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)

async def seasons_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    try:
        season_control = db.query(SeasonControl).first()
        if not season_control or season_control.current_season == 0:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤"
            )
            return

        keyboard = await create_season_keyboard(season_control.current_season)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:",
            reply_markup=keyboard
        )
    finally:
        db.close()

async def soseasons_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    try:
        season_control = db.query(SeasonControl).first()
        if not season_control or season_control.current_season == 0:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤"
            )
            return

        keyboard = await create_season_keyboard(season_control.current_season)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—É–Ω–æ–≤:",
            reply_markup=keyboard
        )
    finally:
        db.close()

async def handle_season_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    season_number = int(query.data.split("_")[1])
    db = SessionLocal()
    try:
        if "—Å–æ—Å—É–Ω–æ–≤" in query.message.text:
            # Handle soseasons stats
            stats = db.query(SeasonStats).filter(
                SeasonStats.season_id == season_number,
                SeasonStats.sosal_count > 0
            ).order_by(SeasonStats.sosal_count.desc()).all()

            if not stats:
                await query.edit_message_text(f"–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Å—É–Ω–æ–≤ –¥–ª—è —Å–µ–∑–æ–Ω–∞ {season_number}")
                return

            message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—É–Ω–æ–≤ —Å–µ–∑–æ–Ω–∞ {season_number}:\n"
            for i, stat in enumerate(stats, 1):
                name_with_prefix = f"@{stat.username}" if '@' not in stat.username else stat.username
                message += f"{i}. {name_with_prefix}: {stat.sosal_count}\n"
        else:
            # Handle regular seasons stats
            run_stats = db.query(SeasonStats).filter(
                SeasonStats.season_id == season_number,
                SeasonStats.run_count > 0
            ).order_by(SeasonStats.run_count.desc()).all()

            pidor_stats = db.query(SeasonStats).filter(
                SeasonStats.season_id == season_number,
                SeasonStats.pidor_count > 0
            ).order_by(SeasonStats.pidor_count.desc()).all()

            if not run_stats and not pidor_stats:
                await query.edit_message_text(f"–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–µ–∑–æ–Ω–∞ {season_number}")
                return

            message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∑–æ–Ω–∞ {season_number}:\n\n"
            
            if run_stats:
                message += "–¢–æ–ø –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤:\n"
                for i, stat in enumerate(run_stats, 1):
                    name_with_prefix = f"@{stat.username}" if '@' not in stat.username else stat.username
                    message += f"{i}. {name_with_prefix}: {stat.run_count}\n"
                message += "\n"

            if pidor_stats:
                message += "–¢–æ–ø –ø–∏–¥–æ—Ä–æ–≤:\n"
                for i, stat in enumerate(pidor_stats, 1):
                    name_with_prefix = f"@{stat.username}" if '@' not in stat.username else stat.username
                    message += f"{i}. {name_with_prefix}: {stat.pidor_count}\n"

        await query.edit_message_text(message)
    finally:
        db.close()

async def startseason_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != ADMIN_USER:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        return

    db = SessionLocal()
    try:
        season_control = db.query(SeasonControl).first()
        if season_control and season_control.is_active:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–°–µ–∑–æ–Ω {season_control.current_season} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω"
            )
            return

        moscow_now = datetime.now(MOSCOW_TZ)
        if not season_control:
            season_control = SeasonControl(current_season=1, is_active=True, last_clear=moscow_now)
            db.add(season_control)
            
            season = Season(
                season_number=1,
                start_date=moscow_now
            )
            db.add(season)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üéâ –ü–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç! üéâ"
            )
        else:
            season_control.is_active = True
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üéâ –°–µ–∑–æ–Ω {season_control.current_season} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! üéâ"
            )
        
        db.commit()
    finally:
        db.close()

def main():
    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    wait_for_db()
    
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("run", run_command))
    application.add_handler(CommandHandler("pidor", pidor_command))
    application.add_handler(CommandHandler("sosal", sosal_command))
    application.add_handler(CommandHandler("nesosal", nesosal_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("sostats", sostats_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("admclear", admclear_command))
    application.add_handler(CommandHandler("seasons", seasons_command))
    application.add_handler(CommandHandler("soseasons", soseasons_command))
    application.add_handler(CommandHandler("startseason", startseason_command))
    application.add_handler(CallbackQueryHandler(handle_season_callback))

    logger.info("Bot started")
    application.run_polling()

if __name__ == "__main__":
    main()
